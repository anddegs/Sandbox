/*
 * (C) Quartet FS 2010
 * ALL RIGHTS RESERVED. This material is the CONFIDENTIAL and PROPRIETARY
 * property of Quartet Financial Systems Limited. Any unauthorized use,
 * reproduction or transfer of this material is strictly prohibited
 */
package com.quartetfs.fwk.messaging.impl;

import com.quartetfs.fwk.QuartetException;
import com.quartetfs.fwk.QuartetRuntimeException;
import com.quartetfs.fwk.messaging.IVariableFieldParser;
import com.quartetfs.fwk.types.impl.PluginValue;
import com.quartetfs.fwk.util.MessageUtil;

/**
 * 
 * Abstract vector parser for vector fields.
 * 
 * @author Quartet Financial Systems
 * @param <K> vector type
 *
 */
public abstract class AVectorFieldParser<K> extends PluginValue implements IVariableFieldParser<K>  {

	/** serialVersionUID */
	private static final long serialVersionUID = -845693134195758019L;

	/** Vector delimiter property: 'vectorDelimiter' */
	static final String DELIMITER_PROPERTY = "vectorDelimiter";

	/** Default delimiter */
	static final char DEFAULT_DELIMITER = ';';

	/** Float sub field delimiter */
	protected final char delimiter;

	/**
	 * null means we don't know in advance the size of the vector
	 */
	protected Integer vectorSize;
	
	public AVectorFieldParser(final char delimiter) {
		this.delimiter = delimiter;
	}

	/** Return the default delimiter or read the system property */
	public static char getDefaultDelimiter() {
		String prop = System.getProperty(DELIMITER_PROPERTY);
		if(prop == null || prop.length() == 0) {
			return DEFAULT_DELIMITER;
		} else {
			return prop.charAt(0);
		}
	}

	/** Create a new empty vector */
	protected abstract K newVector(int vectorSize);

	@Override
	public K parse(final CharSequence sequence) throws QuartetRuntimeException {
		final int length = sequence.length();
		
		int actualVectorSize;
		
		if (vectorSize == null){
			if (length == 0) {
				actualVectorSize = 0;
			} else {
				actualVectorSize = 1;		
				for(int c = 0; c < length; c++) {
					if(delimiter == sequence.charAt(c)) {
						actualVectorSize++;
					}
				}
			}
		} else {
			actualVectorSize = vectorSize;
		}
		
		/** Resulting vector */
		final K vector = newVector(actualVectorSize);

		// Char sequence of the current float
		final SubSequence seq = new SubSequence(sequence);

		try {

			int vectorIndex = 0;

			for(int c = 0; c < length; c++) {
				if(delimiter == sequence.charAt(c)) {
					// float sub field end detected
					seq.from = seq.to == 0 ? 0 : seq.to + 1;
					seq.to = c;
					fillVector(vector, vectorIndex++, seq);
				} else if(c == length - 1) {
					// end of vector field detected
					seq.from = seq.to == 0 ? 0 : seq.to + 1;
					seq.to = length;
					fillVector(vector, vectorIndex++, seq);
				}
			}
			if(vectorIndex==0) return null;
			
//			if(vectorIndex != actualVectorSize) {
//				String m = MessageUtil.formMessage(MessagesCSV.BUNDLE, MessagesCSV.NO_GOOD_LENGTH,vectorIndex);			
//				throw new QuartetException(m);
//			}

		} catch(Exception e) {
			String m = MessageUtil.formMessage(MessagesCSV.BUNDLE, MessagesCSV.ERROR_PARSING);			
			throw new QuartetRuntimeException(m, e);
		}

		return vector;
	}

	/**
	 * Fill an element of the vector with what is parsed
	 * from the current char sequence.
	 *
	 * @param vector
	 * @param index
	 * @param sequence
	 */
	protected abstract void fillVector(K vector, int index, CharSequence sequence);

}