TASK DESCRIPTION

Attention: Please follow these instructions super accurately.

 - Develop the solution yourself. Do not try to find a shortcut by
   using the web.
 - Whilst the preference for the test is to use Java using maven as build tool,
   you may use any programming language you like.
 - If another language other than Java is used, please provide instructions 
   on how to build the project, the versions used and the instructions on how to run the program.
 - The core of the solution should be written without any add-ons to
   the core of the programming language. Use only the defined language
   standard (e.g. you can use all features that you find in a standard Sun JDK).
   This means that you can use external libraries, but your program
   should still produce the wanted solutions after removing those
   parts. For example, if you would decide to use a logging library
   then your program would still work correctly after removing all
   parts that use the logging library. You can also use JUnit (or equivalent test library).
 - Optimize for speed of development and quality of development. Do
   not optimize for runtime execution speed. The problem is small and
   you can afford to waste a few milli seconds. It is better to focus
   on getting a working solution faster.
 - Deliver your result in the best professional quality you can
   produce. Polish your solution. Make a master piece out of it.  It
   is part of this task to compare what different people consider to
   be a professional quality solution.
 - The program should not take long to solve the problem in terms of computing power.

First read through the whole of it in order to get an overview.
Concentrate on the details only upon second reading.

PROBLEM 1
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

   3
  7 4
 2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

                            75
                          95  64
                        17  47  82
                      18  35  87  10
                    20  04  82  47  65
                  19  01  23  75  03  34
                88  02  77  73  07  63  67
              99  65  04  28  06  16  70  92
            41  41  26  56  83  40  80  70  33
          41  48  72  33  47  32  37  16  94  29
        53  71  44  65  25  43  91  52  97  51  14
      70  11  33  28  77  73  17  78  39  68  17  57
    91  71  52  38  17  14  91  43  58  50  27  29  48
  63  66  04  68  89  53  67  30  73  16  69  87  40  31
04  62  98  27  23  09  70  98  73  93  38  53  60  04  23


PROBLEM 2

As an investment bank we have a requirement to maintain the total quantity of a traded security held at any point in time, this is referred to as a real time position.

A position is stored at an aggregated level using the trading account and security identifier.

Creation of a position is driven by an incoming Trade Event stream. Each event contains the key attributes required to create the position: 
•    Trade ID – Identifier for the trade, sequential number
•    Trade Version – Version of the trade, sequential number
•    Security Identifier – Traded security, string
•    Quantity – Number of shares in the current trade, number
•    Direction – Buy or Sell indicator
•    Account Number – Account used to purchase shares, string
•    Operation – NEW/AMEND/CANCEL

Positioning Rules
1. Each unique Account + Security Identifier combination creates one aggregate position record that contains multiple trade events.
2. The position quantity will be incremented when  a trade is processed with the following attributes:
    a.    Direction = BUY, Operation = NEW or AMEND
    b.    Direction = SELL, Operation = CANCEL
3.    The position quantity will be decremented when  a trade is processed with the following attributes:
    a.    Direction = SELL, Operation = NEW or AMEND
    b.    Direction = BUY, Operation = CANCEL
4.    Multiple versions of a trade with the same trade ID can be processed, however, only the trade with the highest version should remain part of the aggregated position record.

Lifecycle example - assume the same account and security identifier. In the input set the account, direction, operation and security identifier can change between versions.
Trade ID     Version    Operation    Quantity    Outcome
1            1          NEW          100         Process the NEW trade. Result = 100
1            2          AMEND        150         Reverse the previous NEW trade. Process the AMEND trade. Result = 150
1            3          AMEND        200         Reverse the previous AMEND trade. Process the AMEND trade. Result = 200.
1            4          CANCEL       N/A         Reverse the previous AMEND. Result = 0

Trade events can arrive in any order. Once the solution is completed for sequentially incrementing IDs and versions in the below input data. 

Input
Trade ID|Version|Security Identifier|Quantity|Trade|Direction|Account|Operation
1234|1|XYZ|100|BUY|ACC-1234|NEW
1234|2|XYZ|150|BUY|ACC-1234|AMEND
5678|1|QED|200|BUY|ACC-2345|NEW
5678|2|QED|0|BUY|ACC-2345|CANCEL
2233|1|RET|100|SELL|ACC-3456|NEW
2233|2|RET|400|SELL|ACC-3456|AMEND
2233|3|RET|0|SELL|ACC-3456|CANCEL
8896|1|YUI|300|BUY|ACC-4567|NEW
6638|1|YUI|100|SELL|ACC-4567|NEW
6363|1|HJK|200|BUY|ACC-5678|NEW
7666|1|HJK|200|BUY|ACC-5678|NEW
6363|2|HJK|100|BUY|ACC-5678|AMEND
7666|2|HJK|50|SELL|ACC-5678|AMEND
8686|1|FVB|100|BUY|ACC-6789|NEW
8686|2|GBN|100|BUY|ACC-6789|AMEND
9654|1|FVB|200|BUY|ACC-6789|NEW
1025|1|JKL|100|BUY|ACC-7789|NEW
1036|1|JKL|100|BUY|ACC-7789|NEW
1025|2|JKL|100|SELL|ACC-8877|AMEND
1122|1|KLO|100|BUY|ACC-9045|NEW
1122|2|HJK|100|SELL|ACC-9045|AMEND
1122|3|KLO|100|SELL|ACC-9045|AMEND
1144|1|KLO|300|BUY|ACC-9045|NEW
1144|2|KLO|400|BUY|ACC-9045|AMEND
1155|1|KLO|600|SELL|ACC-9045|NEW
1155|2|KLO|0|BUY|ACC-9045|CANCEL


Output
Account|Instrument|Quantity|Trades
ACC-1234|XYZ|150|1234
ACC-2345|QED|0|5678
ACC-3456|RET|0|2233
ACC-4567|YUI|200|8896,6638
ACC-5678|HJK|50|6363,7666
ACC-6789|GBN|100|8686
ACC-6789|FVB|200|9654,8686
ACC-7789|JKL|100|1036,1025
ACC-8877|JKL|-100|1025
ACC-9045|KLO|300|1122,1144,1155
ACC-9045|HJK|0|1122


PROBLEM 3

In the game, Monopoly, the standard board is set up in the following way:
->
GO 	A1 	CC1 A2 	T1 	R1 	B1 	CH1 B2 	B3 	JAIL
H2 	  	                                C1
T2 	  	                                U1
H1 	  	                                C2
CH3 	  	                            C3
R4 	  	                                R2
G3 	  	                                D1
CC3 	  	                            CC2
G2 	  	                                D2
G1 	  	                                D3
G2J F3 	U2 	F2 	F1 	R3 	E3 	E2 	CH2 E1 	FP

A player starts on the GO square and adds the scores on two 6-sided dice to determine the number of squares they advance in a clockwise direction. Without any further rules we would expect to visit each square with equal probability: 2.5%. However, landing on G2J (Go To Jail), CC (community chest), and CH (chance) changes this distribution.

In addition to G2J, and one card from each of CC and CH, that orders the player to go directly to jail, if a player rolls three consecutive doubles, they do not advance the result of their 3rd roll. Instead they proceed directly to jail.

At the beginning of the game, the CC and CH cards are shuffled. When a player lands on CC or CH they take a card from the top of the respective pile and, after following the instructions, it is returned to the bottom of the pile. There are sixteen cards in each pile, but for the purpose of this problem we are only concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square.

    Community Chest (2/16 cards):
        Advance to GO
        Go to JAIL
    Chance (10/16 cards):
        Advance to GO
        Go to JAIL
        Go to C1
        Go to E3
        Go to H2
        Go to R1
        Go to next R (railway company)
        Go to next R
        Go to next U (utility company)
        Go back 3 squares.

The heart of this problem concerns the likelihood of visiting a particular square. That is, the probability of finishing at that square after a roll. For this reason it should be clear that, with the exception of G2J for which the probability of finishing on it is zero, the CH squares will have the lowest probabilities, as 5/8 request a movement to another square, and it is the final square that the player finishes at on each roll that we are interested in. We shall make no distinction between "Just Visiting" and being sent to JAIL, and we shall also ignore the rule about requiring a double to "get out of jail", assuming that they pay to get out on their next turn.

By starting at GO and numbering the squares sequentially from 00 to 39 we can concatenate these two-digit numbers to produce strings that correspond with sets of squares.

Statistically it can be shown that the three most popular squares, in order, are JAIL (6.24%) = Square 10, E3 (3.18%) = Square 24, and GO (3.09%) = Square 00. So these three most popular squares can be listed with the six-digit modal string: 102400.

If, instead of using two 6-sided dice, two 4-sided dice are used, find the six-digit modal string.
